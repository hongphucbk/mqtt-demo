/// <reference types="node" />
import { EventEmitter } from 'events';
import { Socket } from 'net';
import { BooleanArray } from './constants';
import ModbusServerClient from './modbus-server-client';
export interface IModbusServerOptions {
    coils: Buffer;
    discrete: Buffer;
    holding: Buffer;
    input: Buffer;
}
export declare type BufferCallback = (buffer: Buffer) => void;
export default class ModbusServer extends EventEmitter {
    private _options;
    private readonly _coils;
    private readonly _discrete;
    private readonly _holding;
    private readonly _input;
    constructor(options?: Partial<IModbusServerOptions>);
    readonly coils: Buffer;
    readonly discrete: Buffer;
    readonly holding: Buffer;
    readonly input: Buffer;
    on(event: 'connection', listener: (socket: Socket) => void): this;
    emit(event: 'connection', client: ModbusServerClient<any, any, any>): boolean;
    emit(event: 'readCoils', request: any, cb: BufferCallback): boolean;
    emit(event: 'preReadCoils', request: any, cb: BufferCallback): boolean;
    emit(event: 'postReadCoils', request: any, cb: BufferCallback): boolean;
    emit(event: 'readDiscreteInputs', request: any, cb: BufferCallback): boolean;
    emit(event: 'preReadDiscreteInputs', request: any, cb: BufferCallback): boolean;
    emit(event: 'postReadDiscreteInputs', request: any, cb: BufferCallback): boolean;
    emit(event: 'readHoldingRegisters', request: any, cb: BufferCallback): boolean;
    emit(event: 'preReadHoldingRegisters', request: any, cb: BufferCallback): boolean;
    emit(event: 'postReadHoldingRegisters', request: any, cb: BufferCallback): boolean;
    emit(event: 'readInputRegisters', request: any, cb: BufferCallback): boolean;
    emit(event: 'preReadInputRegisters', request: any, cb: BufferCallback): boolean;
    emit(event: 'postReadInputRegisters', request: any, cb: BufferCallback): boolean;
    emit(event: 'writeSingleCoil', request: any, cb: BufferCallback): boolean;
    emit(event: 'preWriteSingleCoil', request: any, cb: BufferCallback): boolean;
    emit(event: 'postWriteSingleCoil', request: any, cb: BufferCallback): boolean;
    emit(event: 'writeSingleRegister', request: any, cb: BufferCallback): boolean;
    emit(event: 'preWriteSingleRegister', request: any, cb: BufferCallback): boolean;
    emit(event: 'postWriteSingleRegister', request: any, cb: BufferCallback): boolean;
    emit(event: 'writeMultipleCoils', request: any, cb: BufferCallback): boolean;
    emit(event: 'preWriteMultipleCoils', request: any, cb: BufferCallback): boolean;
    emit(event: 'writeMultipleCoils', coils: Buffer, oldStatus: BooleanArray): boolean;
    emit(event: 'postWriteMultipleCoils', coils: Buffer, newStatus: BooleanArray): boolean;
    emit(event: 'postWriteMultipleCoils', request: any, cb: BufferCallback): boolean;
    emit(event: 'writeMultipleRegisters', request: any, cb: BufferCallback): boolean;
    emit(event: 'preWriteMultipleRegisters', request: any, cb: BufferCallback): boolean;
    emit(event: 'writeMultipleRegisters', holdingRegisters: Buffer): boolean;
    emit(event: 'postWriteMultipleRegisters', holdingRegisters: Buffer): boolean;
    emit(event: 'postWriteMultipleRegisters', request: any, cb: BufferCallback): boolean;
}
//# sourceMappingURL=modbus-server.d.ts.map